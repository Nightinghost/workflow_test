name: Cross-Platform Build and Test

on: [push, pull_request]

jobs:
  windows_msvc:
    runs-on: windows-latest
    name: VS2022 (MSVC)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup MSVC
        run: |
          echo "Using MSVC from Visual Studio 2022"
          
      - name: Configure CMake
        run: |
          cmake -B build -G "Visual Studio 17 2022" -A x64 -DPEELMESH_BUILD_PYTHON=ON -DPEELMESH_BUILD_TESTS=ON
          
      - name: Build
        run: |
          cmake --build build --config Release --target main
          
      - name: Run Tests
        run: |
          cd build
          ctest -C Release --output-on-failure
          
      - name: Save Status
        shell: bash
        run: |
          BUILD_STATUS=$([ $? -eq 0 ] && echo "success" || echo "failed")
          COLOR=$([ "$BUILD_STATUS" = "success" ] && echo "brightgreen" || echo "red")
          
          # 简化的JSON数据
          echo "{\"schemaVersion\": 1, \"label\": \"VS2022\", \"message\": \"$BUILD_STATUS\", \"color\": \"$COLOR\"}" > msvc.json
          
        id: status

      - name: Upload Status
        uses: actions/upload-artifact@v4
        with:
          name: msvc-status
          path: msvc.json

  windows_clang:
    runs-on: windows-latest
    name: Clang (VS2022)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      # - name: Install LLVM/Clang
      #   run: |
      #     choco install llvm --version=16.0.6 -y
          
      - name: Configure CMake
        run: |
          cmake -B build -G "Visual Studio 17 2022" -A x64 -T "ClangCL" -DPEELMESH_BUILD_PYTHON=ON -DPEELMESH_BUILD_TESTS=ON
          
      - name: Build
        run: |
          cmake --build build --config Release --target main
          
      - name: Run Tests
        run: |
          cd build
          ctest -C Release --output-on-failure
          
      - name: Save Status
        shell: bash
        run: |
          BUILD_STATUS=$([ $? -eq 0 ] && echo "success" || echo "failed")
          COLOR=$([ "$BUILD_STATUS" = "success" ] && echo "brightgreen" || echo "red")
          
          echo "{\"schemaVersion\": 1, \"label\": \"ClangCL\", \"message\": \"$BUILD_STATUS\", \"color\": \"$COLOR\"}" > clang.json
          
        id: status

      - name: Upload Status
        uses: actions/upload-artifact@v4
        with:
          name: clang-status
          path: clang.json

  linux_gcc:
    runs-on: ubuntu-latest
    name: Linux (g++13)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup GCC-13
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-13
          
      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_CXX_COMPILER=g++-13 -DPEELMESH_BUILD_PYTHON=ON -DPEELMESH_BUILD_TESTS=ON
          
      - name: Build
        run: |
          cmake --build build --config Release --target main
          
      - name: Run Tests
        run: |
          cd build
          ctest -C Release --output-on-failure

      - name: Save Build Status
        shell: bash
        run: |
          if [ $? -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=green" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "color=red" >> $GITHUB_OUTPUT
          fi
        id: build_result